Webpack:
	É um servidor para fazer o navegador carregar automaticamente quanto
	colocar código novo, ele vai ajudar também quando todo arquivo JS feito
	com ES6 for alterado automaticamente já ativar o babel para ele converter
	esse arquivo em uma sintaxe que o nosso navegador entenda.
	É um servidor de desenvolvimento para quando a gente usa JS utilizando essas
	novas future do ES.
=============================================================================================
Baixar o Node.js e o yarn
---------------------------------------------------------------------------------------------
				CONFIGURANDO BABEL
yarn add @babel/cli

	Essa é uma dependencia, ela vai dar posibilidade para a gente trabalhar com
	a interface de linha de comando do babel.
	A linha de comando babel é que ele vai fornecer alguns comandos para nós usar
	no terminal.
------------
yarn add @babel/preset-env

	Ele vai entender qual que é o ambiente que a gente está trabalhando.
	ele vai perceber que estamos trabalhando no navegador e ele vai converter as
	future do ES6, ES7 e ES8 para o navegador que não entendem ainda
------------
yarn add @babel/core
------------

chamar no cmd -> 	yarn dev

------------ BABEL:
O Babel é um transcompilador JavaScript de código aberto e gratuito usado
principalmente para converter o código ECMAScript 2015+ em uma versão compatível
com versões anteriores do JavaScript que pode ser executada por mecanismos JavaScript
mais antigos.
============================================================================================
			CLASSES

Dentro da Classe nós podemos definir métodos.

Herança JS:
	
super();

	É básicamente a gente chamar o constructor da nossa classe pai, e dai podemos
	criar nossas.

MÉTODOS ESTÁTICOS
	Quando eu defino o método static na minha classe, ele não encherga o restante
	da classe, então ele não vai enchergar o que está dentro dele.
	Todo vez que tiver esse método static, ele é básicamente para a gente passar
	alguma informação para ele e ele retornar outra informação, independente do
	restante da classe.
	então quando ter uma método static dentro de uma classe, não vamos ter nem
	constructor, ela vai ser uma classe só para ajudar nós a fazer alguma coisa.
============================================================================================
				CONST & LET

Constantes e variáveis de Escopos

Const
	Const é só uma variável de leitura, não pode reatribuir um valor a uma variável.
	Mas dá para multar uma variável com o Const.
	A diferença entre reatribuir e multar uma variável.
	Multar ao multação é quando nós trabalhamos com o mesmo formato do objeto com
	as mesmas infórmações, porém a gente altera valores dentro desse objeto ou de 
	um vetor. A multação é posivel dentro de uma constante.
ex:
	const usuario = {nome: 'João'};
	usuario.nome = 'Diego';
	console.log('usuario');
---------------------------------

Variáveis de Escopos == let
	É usada dentro de métodos e só dentro desses métodos ela pode ser usada.
=============================================================================================
				Operadores em Array ES6


map();

	Serve para percorrer o vetor e retornar alguma coisa de dentro, retornar 
	uma nova informação.
	O map percorre todo nosso vetor cada item dele e execulta a ação que a
	gente precisa execulta


reduce();

	Básicamente uma forma da gente consumir todo nosso vetor e transformar em uma
	única infórmação, única variável.

filter();

	ex: vamos supor que eu quero pegar todos os númros pares do meu vetor.
	O bloco de código que nós temos dentro do Filter() a gente precisa
	obrigatoriamente que ela return true ou false.

find();

	Usado para quando queremos verificar se existe alguma informação dentro do vetor
	ou se a gente consegue encontrar essa informação dentro de vetor.
	
===================================================================================================
				ARROW FUNCTIONS

	Quando o function não tem nome, quando ela só resebe um parâmetro e bloco de
	código dela, mas ela não tem um nome ou sejá uma função anonima.
	E esse é o melhor lugar para usar as arrow functions. Tem o mesmo funcionamento.

	quando a função recebe um parâmetro pode tirar os parenteses e deixar o parâmetro
	livre sem parenteses.

	Quando a nossa função retorna simplesmente alguma informação, tipo na função
	abaixo que retorna um parâmetro * 2, quando não são várias 
	linhas(um corpo de função).
ex:
	const newArr = arr.map(item => {
    	return item * 2;
	});
	console.log(newArr);
	
	Eu posso apagar tudo o return de dentro da função.

ex de como que fica:

	const newArr = arr.map(item => item * 2);
	console.log(newArr);

	A arrow function fica mais limpa usada em um ambiente de função anonima.

	Se for usar uma function que recebe dois ou mais números dai não vale a pena usar 
	arrow function.
===============================================================================================
				Valores Padrão

Uma outra funcionalidade boa no EM6, tanto para funções quando para arrow functions
é de colocar valores padrão para os parâmetros das funções.

NAN
	Mostra que ele não conseguiu identificar, retorna como se fosse um infinito
	um número que não existe, porque ele não identificou os parâmetros para ele
	rodar e exibir

function soma(a=5, b=4){}
	Conseguimos atribuir um valor para os dois parâmetros de soma(), assim não dando
	o erro de NAN, também funciona com arrow function.
const subtrair = (a = 3, b = 6) => a - b;

Com essa aluna vi como abribuir valores padrão para funções no JS.
================================================================================================
			Desestruturação de Objetos JS


É possivel usar esse conseito de desestruturação em vários locais 
tipo parâmetros de funções. 

Usar o conseito de Desestruturação ES6+ dá para buscar dados de usuário, com OBJETO em JSON.
não só usuários mas como qualquer objeto que queremos os dados.
=================================================================================================
			Operadores rest/spread

Este operador é conhecido por usar  3 pontos(...) um do lado do outro.

para usar eles precisamos instalar alguns pacotes, porque esses pacotes ainda não foram
acropados para a versão principal do babel, precisamos instalar ele em formas de pluggin:


yarn add @babel/plugin-proposal-object-rest-spread

	vou adicionar esse nome do código de instalação detro do meu código, para colocar
	ele dentro do .babelrc.

	feito isso, depois vou cancelar no cmd aonde está rodando o yarn dev e execultar
	de novo (para atualizar a alteração feita).

REST

	O Rest tem duas aplicação, ele serve para pegarmos restos das propriedades.
	Os restos é básicamente quando eu quero pegar um dado tipo um nome dentro de
	um objeto apenas e os resto dos parâmetros que estão dentro do Objeto eu quero colocar
	dentro de outra variável.
ex:

const usuario = {
    nome: 'Jonatas',
    idade: 20,
    empresa: 'Seilá'
};

const { nome, ...resto } = usuario;

console.log(nome);
console.log(resto); // aqui vai mostrar todos os outros parâmetros, menos o nome.
---------------------------
Res com vetores:

// também pode ser inventada por vetores.
const arr = [1, 2, 3, 4];

const [ a, b, ...c ] = arr;

console.log(arr);
console.log(a);
---------------------------
Res com functions também são possiveis.
----------=========
	SPREAD

	O SPREAD tem a funcionalidade díferente o Rest, enquanto o Rest pega o resto de
	alguma Desestruturação, de uma pasada de parâmetros. O SPREAD ele faz o papel de
	propagar de repasar as informações de algum Objeto ou de algum Vetor para outra
	estrutura de dados.

Uma outra utlização o SPREAD:
	Quando ex: criar um novo Objeto de usuario com todos as propriedades de um já 
	existente porém só quero trocar uma propriedade.

ELES SÃO PARA MANIPULAR VALORES DENTRO DE VETORES E OBJETOS.
==============================================================================================
				TEMPLEATE LITERAL

	Que é uma forma de incluir variáveis dentro de Strings no JS a partir do ES6

	const nome = 'Diego';
	const idade = 23;

	console.log(`Meu nome é ${nome} e tenho ${idade} anos`); // É isso.
================================================================================================
				OBJECT SHORT SYNTAX
Ou sintaxe curta de Objeto. Usando o EM6.









